// <auto-generated />
using System;
using Avto.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Avto.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Avto.Data.Kilometri", b =>
                {
                    b.Property<int>("Kmid")
                        .HasColumnType("int")
                        .HasColumnName("KMID");

                    b.Property<string>("Kmname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("KMName");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Kilometri", (string)null);
                });

            modelBuilder.Entity("Avto.Data.List", b =>
                {
                    b.Property<DateTime?>("ListData")
                        .HasColumnType("datetime");

                    b.Property<double?>("ListDoma")
                        .HasColumnType("float");

                    b.Property<int>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    b.Property<double?>("ListIzvan")
                        .HasColumnType("float");

                    b.Property<double?>("ListMoto")
                        .HasColumnType("float");

                    b.Property<string>("ListNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double?>("ListSlujitel")
                        .HasColumnType("float");

                    b.Property<double?>("ListZarabotka")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("List", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Moto", b =>
                {
                    b.Property<double?>("AgregatNorma")
                        .HasColumnType("float");

                    b.Property<bool>("Brak")
                        .HasColumnType("bit");

                    b.Property<double?>("GradskaNorma")
                        .HasColumnType("float");

                    b.Property<double?>("KlimaNorma")
                        .HasColumnType("float");

                    b.Property<double?>("KlimatikNorma")
                        .HasColumnType("float");

                    b.Property<int>("MotoId")
                        .HasColumnType("int")
                        .HasColumnName("MotoID");

                    b.Property<string>("MotoName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MotoNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<double?>("MqstoNorma")
                        .HasColumnType("float");

                    b.Property<double?>("OkragNorma")
                        .HasColumnType("float");

                    b.Property<double>("OsnovnaNorma")
                        .HasColumnType("float");

                    b.Property<double?>("PechkaNorma")
                        .HasColumnType("float");

                    b.Property<double?>("RudnikNorma")
                        .HasColumnType("float");

                    b.Property<double?>("StolicaNorma")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Moto", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Norma", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<double?>("NormaKlimatronik")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Norma", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Otdel", b =>
                {
                    b.Property<int>("OtdelId")
                        .HasColumnType("int")
                        .HasColumnName("OtdelID");

                    b.Property<string>("OtdelName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Otdel", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Slujiteli", b =>
                {
                    b.Property<int>("SlujitelId")
                        .HasColumnType("int")
                        .HasColumnName("SlujitelID");

                    b.Property<string>("SlujitelName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("SlujitelNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Slujiteli", (string)null);
                });

            modelBuilder.Entity("Avto.Data.TipZastrahovki", b =>
                {
                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<string>("TipZastrahovki1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("TipZastrahovki");

                    b.Property<int>("TipZastrahovkiId")
                        .HasColumnType("int")
                        .HasColumnName("TipZastrahovkiID");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("TipZastrahovki", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Transak", b =>
                {
                    b.Property<double?>("AgregatTrans")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateTrans")
                        .HasColumnType("datetime");

                    b.Property<double?>("Doma")
                        .HasColumnType("float");

                    b.Property<double?>("GradskaTrans")
                        .HasColumnType("float");

                    b.Property<double?>("Izvan")
                        .HasColumnType("float");

                    b.Property<double?>("KlimaTrans")
                        .HasColumnType("float");

                    b.Property<double?>("KlimatikTrans")
                        .HasColumnType("float");

                    b.Property<double?>("KmKm")
                        .HasColumnType("float");

                    b.Property<int?>("Kmid")
                        .HasColumnType("int")
                        .HasColumnName("KMID");

                    b.Property<int?>("ListId")
                        .HasColumnType("int")
                        .HasColumnName("ListID");

                    b.Property<int?>("MotoId")
                        .HasColumnType("int")
                        .HasColumnName("MotoID");

                    b.Property<double?>("MqstoTrans")
                        .HasColumnType("float");

                    b.Property<double?>("OkragTrans")
                        .HasColumnType("float");

                    b.Property<double?>("OsnovnaTrans")
                        .HasColumnType("float");

                    b.Property<int?>("OtdelId")
                        .HasColumnType("int")
                        .HasColumnName("OtdelID");

                    b.Property<double?>("PechkaTrans")
                        .HasColumnType("float");

                    b.Property<double?>("RudnikTrans")
                        .HasColumnType("float");

                    b.Property<int?>("SlujitelId")
                        .HasColumnType("int")
                        .HasColumnName("SlujitelID");

                    b.Property<double?>("StolicaTrans")
                        .HasColumnType("float");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("TransID");

                    b.Property<string>("TransNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Zarabotka")
                        .HasColumnType("float");

                    b.ToTable("Transak", (string)null);
                });

            modelBuilder.Entity("Avto.Data.Zastrahovki", b =>
                {
                    b.Property<DateTime?>("DataEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataStart")
                        .HasColumnType("datetime");

                    b.Property<int?>("MotoId")
                        .HasColumnType("int")
                        .HasColumnName("MotoID");

                    b.Property<DateTime?>("TekushtaData")
                        .HasColumnType("datetime");

                    b.Property<int?>("TipZastrahovkaId")
                        .HasColumnType("int")
                        .HasColumnName("TipZastrahovkaID");

                    b.Property<string>("UserList")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZastrahovkiId")
                        .HasColumnType("int")
                        .HasColumnName("ZastrahovkiID");

                    b.ToTable("Zastrahovki", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
